@page "/fetchdata"

@using HealthVault.Client.Data
@using HealthVault.Entity
@using HealthVault.Entity.Model
@using System.Linq
@using System.Collections.Generic
@using System.Net.Http
@using System.Threading.Tasks
@using System.Net
@using System.Text.Json 
@*@using RestApi.Shared*@
@inject WeatherForecastService ForecastService
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        //IHttpClientFactory _clientFactory;
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        var s = await Http.GetStringAsync("https://localhost:5001/weatherforecast");
        forecasts = JsonSerializer.Deserialize<WeatherForecast[]>(s);

        string ss = s;



        //var request = new HttpRequestMessage(HttpMethod.Get,
        //"repos/aspnet/AspNetCore.Docs/pulls");

        //var client = IHttpClientFactory.CreateClient("github");

        //var response = await client.SendAsync(request);

        //if (response.IsSuccessStatusCode)
        //{
        //    using var responseStream = await response.Content.ReadAsStreamAsync();
        //    PullRequests = await JsonSerializer.DeserializeAsync
        //            <IEnumerable<WeatherForecast>>(responseStream);
        //}




    }
}
