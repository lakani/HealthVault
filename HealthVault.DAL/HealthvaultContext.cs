// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using HealthVault.Entity.Model;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using HealthVault.Entity.Model;

namespace HealthVault.Entity.Context
{
    public partial class HealthvaultContext : DbContext
    {
        public HealthvaultContext()
        {
        }

        public HealthvaultContext(DbContextOptions<HealthvaultContext> options)
            : base(options)
        {
        }

        public virtual DbSet<lut_city> lut_city { get; set; }
        public virtual DbSet<lut_country> lut_country { get; set; }
        public virtual DbSet<lut_general_usages> lut_general_usages { get; set; }
        public virtual DbSet<lut_organizationtype> lut_organizationtype { get; set; }
        public virtual DbSet<lut_state> lut_state { get; set; }
        public virtual DbSet<organization> organization { get; set; }
        public virtual DbSet<patient> patient { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=HealthVault;Persist Security Info=True;User ID=sa;Password=get@get1");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<lut_city>(entity =>
            {
                entity.HasKey(e => e.Identifier)
                    .HasName("PK_LUTGovernorates");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<lut_country>(entity =>
            {
                entity.HasKey(e => e.Identifier);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<lut_general_usages>(entity =>
            {
                entity.HasKey(e => e.Identifier);

                entity.Property(e => e.table_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.value).HasMaxLength(100);
            });

            modelBuilder.Entity<lut_organizationtype>(entity =>
            {
                entity.HasKey(e => e.Identifier)
                    .HasName("PK_LUTOrganizationType");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<lut_state>(entity =>
            {
                entity.HasKey(e => e.Identifier);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<organization>(entity =>
            {
                entity.HasKey(e => e.identifier);

                entity.Property(e => e.address).HasMaxLength(100);

                entity.Property(e => e.alias).HasMaxLength(100);

                entity.Property(e => e.name).HasMaxLength(100);

                entity.Property(e => e.telecom).HasMaxLength(20);

                entity.Property(e => e.telecom1).HasMaxLength(20);

                entity.Property(e => e.telecom2).HasMaxLength(20);
            });

            modelBuilder.Entity<patient>(entity =>
            {
                entity.HasKey(e => e.Record_ID)
                    .HasName("PK_Patient");

                entity.Property(e => e.address).HasMaxLength(80);

                entity.Property(e => e.birth_date).HasColumnType("date");

                entity.Property(e => e.deceased_date).HasColumnType("date");

                entity.Property(e => e.email).HasMaxLength(80);

                entity.Property(e => e.familyname).HasMaxLength(80);

                entity.Property(e => e.identifier).HasMaxLength(20);

                entity.Property(e => e.name).HasMaxLength(50);

                entity.Property(e => e.telecom).HasMaxLength(20);

                entity.Property(e => e.telecom1).HasMaxLength(20);

                entity.Property(e => e.telecom2).HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}